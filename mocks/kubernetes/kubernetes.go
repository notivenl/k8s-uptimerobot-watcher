// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/notivenl/uptime-kubernetes/pkg/ports/kubernetes"
	v1i "k8s.io/api/networking/v1"
	"sync"
)

// Ensure, that KubernetesMock does implement kubernetes.Kubernetes.
// If this is not the case, regenerate this file with moq.
var _ kubernetes.Kubernetes = &KubernetesMock{}

// KubernetesMock is a mock implementation of kubernetes.Kubernetes.
//
// 	func TestSomethingThatUsesKubernetes(t *testing.T) {
//
// 		// make and configure a mocked kubernetes.Kubernetes
// 		mockedKubernetes := &KubernetesMock{
// 			GetIngressesFunc: func(ctx context.Context) ([]v1i.Ingress, error) {
// 				panic("mock out the GetIngresses method")
// 			},
// 		}
//
// 		// use mockedKubernetes in code that requires kubernetes.Kubernetes
// 		// and then make assertions.
//
// 	}
type KubernetesMock struct {
	// GetIngressesFunc mocks the GetIngresses method.
	GetIngressesFunc func(ctx context.Context) ([]v1i.Ingress, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetIngresses holds details about calls to the GetIngresses method.
		GetIngresses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockGetIngresses sync.RWMutex
}

// GetIngresses calls GetIngressesFunc.
func (mock *KubernetesMock) GetIngresses(ctx context.Context) ([]v1i.Ingress, error) {
	if mock.GetIngressesFunc == nil {
		panic("KubernetesMock.GetIngressesFunc: method is nil but Kubernetes.GetIngresses was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetIngresses.Lock()
	mock.calls.GetIngresses = append(mock.calls.GetIngresses, callInfo)
	mock.lockGetIngresses.Unlock()
	return mock.GetIngressesFunc(ctx)
}

// GetIngressesCalls gets all the calls that were made to GetIngresses.
// Check the length with:
//     len(mockedKubernetes.GetIngressesCalls())
func (mock *KubernetesMock) GetIngressesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetIngresses.RLock()
	calls = mock.calls.GetIngresses
	mock.lockGetIngresses.RUnlock()
	return calls
}
